name: pfsc-docs-bt-via-cached-oca
on: workflow_dispatch
jobs:
  build-test:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    env:
      LIB_VOLUME: pfsc-lib
      DEBUG_WORKFLOW: 1
      PISE_TAG: testing
      #CONTENT_REPO: ${{github.repository}}
      CONTENT_REPO: "proofscape/docs"
    steps:
      # -----------------------------------------
      - name: Checkout wt
        uses: actions/checkout@v3
        with:
          path: wt
      # -----------------------------------------
      # Obtain pise OCA image, preferably from cache
      - name: Cache OCA image
        id: cache-oca
        uses: actions/cache@v3
        with:
          path: pise_images/oca.tar
          key: cache-oca-image-${{env.PISE_TAG}}
      - if: ${{ steps.cache-oca.outputs.cache-hit != 'true' }}
        name: Build OCA image
        uses: wt/.github/actions/build-oca
        with:
          oca-vers: ${{env.PISE_TAG}}
      # Load and re-tag
      - name: Load pise OCA image, and re-tag
        run: |
          docker load --input=pise_images/oca.tar
          docker image tag pise:$PISE_TAG proofscape/pise:$PISE_TAG
      # -----------------------------------------
      # Config
      - name: Config
        id: conf
        run: |
          echo "content-dir=proofscape/lib/gh/${{env.CONTENT_REPO}}" >> $GITHUB_OUTPUT
          echo "content-libpath=gh/${{env.CONTENT_REPO}}" | sed -e "s#/#.#g" >> $GITHUB_OUTPUT
      # Make directories
      - name: Make directories
        run: |
          mkdir -p ${{steps.conf.outputs.content-dir}}
      # Checkout
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{steps.conf.outputs.content-dir}}
          repository: ${{env.CONTENT_REPO}}
      # -----------------------------------------
      # Form and populate a `lib` volume
      - name: Form and populate lib volume
        run: |
          docker run --rm --entrypoint=bash \
            -v ${{github.workspace}}/proofscape/lib:/usr/local/share/proofscape_lib:ro \
            --mount 'type=volume,src=${{env.LIB_VOLUME}},dst=/proofscape/lib' \
            proofscape/pise:$PISE_TAG \
            -c "cp -r /usr/local/share/proofscape_lib/* ~/proofscape/lib"
      # Check population of lib volume
      - if: ${{ env.DEBUG_WORKFLOW >= 1 }}
        name: Check population of lib volume
        run: |
          docker run --rm --entrypoint=bash \
            --mount 'type=volume,src=${{env.LIB_VOLUME}},dst=/proofscape/lib' \
            proofscape/pise:$PISE_TAG \
            -c "cd ~/proofscape/lib; ls -l gh/${{env.CONTENT_REPO}}"
      # -----------------------------------------
      # Give the OCA a normal startup, so that it starts its internal Redis
      # server. Then we will use `docker exec` to run our build command inside
      # this container.
      - name: Start pise
        run: |
          docker run --rm -d \
            --name=pise \
            --mount 'type=volume,src=${{env.LIB_VOLUME}},dst=/proofscape/lib' \
            proofscape/pise:$PISE_TAG
      # -----------------------------------------
      # Now we build our content repo. This is our test, i.e. simply to see if
      # we can build.
      - name: Try building
        run: |
          docker exec \
            -e FLASK_APP=pfsc \
            -w /home/pfsc/proofscape/src/pfsc-server \
            pise bash -c "flask pfsc build --auto-deps -rv ${{steps.conf.outputs.content-libpath}}"
