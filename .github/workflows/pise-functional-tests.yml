name: pise-functional-tests
on: workflow_dispatch
jobs:
  functional-tests:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    env:
      PFSC_ROOT: ${{ format('{0}/proofscape', github.workspace) }}
      TEST_TAG: testing
      TEST_DEPLOY_DIR: testing
      chromedriver-url: https://chromedriver.storage.googleapis.com/107.0.5304.62/chromedriver_linux64.zip
      PYODIDE_SERVE_LOCALLY: 0
      #REDIS_URI: redis://localhost:6379
      #GRAPHDB_URI: redis://localhost:6381
      #PFSC_LIB_ROOT: ${{ format('{0}/lib', github.workspace) }}
      #PFSC_BUILD_ROOT: ${{ format('{0}/build', github.workspace) }}
      #SECRET_KEY: fixed_value_for_testing
    steps:
      # -----------------------------------------
      # INSTALL
      # -----------------------------------------
      # Install Python
      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      # -----------------------------------------
      # Checkout pise
      - name: Checkout pise
        uses: actions/checkout@v3
        with:
          path: 'pise'
          # FIXME
          repository: 'skieffer/pfsc-server'
          ref: 'recombine'
      # -----------------------------------------
      - name: just for edification
        working-directory: pise
        run: pwd -P
      # -----------------------------------------
      # Install manage/venv, preferably from cache
      - name: Cache manage/venv
        id: cache-manage-venv
        uses: actions/cache@v3
        with:
          path: pise/manage/venv
          key: cache-manage-venv-${{ hashFiles('pise/manage/setup.py') }}
      - if: ${{ steps.cache-manage-venv.outputs.cache-hit != 'true' }}
        name: Form the manage/venv directory
        working-directory: pise/manage
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
      - name: Do editable install of pfsc-manage
        # Need this even if cache hit for venv dir, else will get error:
        #   importlib.metadata.PackageNotFoundError: pfsc-manage
        working-directory: pise/manage
        run: |
          source venv/bin/activate
          pip install -e .
      # -----------------------------------------
      # Install server/venv, preferably from cache
      - name: Cache server/venv
        id: cache-server-venv
        uses: actions/cache@v3
        with:
          path: pise/server/venv
          key: cache-server-venv-${{ hashFiles('pise/server/req/*') }}
      - if: ${{ steps.cache-server-venv.outputs.cache-hit != 'true' }}
        name: Install server/venv
        working-directory: pise/server
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          ./req/install.sh
      # -----------------------------------------
      # Install client/node_modules, preferably from cache
      - name: Cache client/node_modules
        id: cache-client-node_modules
        uses: actions/cache@v3
        with:
          path: pise/client/node_modules
          key: cache-client-node_modules-${{ hashFiles('pise/client/package-lock.json') }}
      - if: ${{ steps.cache-client-node_modules.outputs.cache-hit != 'true' }}
        name: Install client/node_modules
        working-directory: pise/client
        run: npm install
      # -----------------------------------------
      # Install chromedriver, preferably from cache
      - name: Cache chromedriver
        id: cache-chromedriver
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/chromedriver
          key: cache-chromedriver-${{ env.chromedriver-url }}
      - if: ${{ steps.cache-chromedriver.outputs.cache-hit != 'true' }}
        name: Install chromedriver
        run: |
          wget ${{ env.chromedriver-url }}
          unzip chromedriver_linux64.zip
          mv chromedriver /usr/local/bin/
      # -----------------------------------------
      # SET UP
      # -----------------------------------------
      # Build directories with pfsc makestruct -y
      - name: makestruct
        working-directory: pise/manage
        run: |
          cp sample_conf.py conf.py
          source venv/bin/activate
          pfsc makestruct -y
      # -----------------------------------------
      - name: Generate a deployment directory
        working-directory: pise/manage
        run: |
          source venv/bin/activate
          pfsc deploy generate --gdb re \
              --pfsc-tag ${{ env.TEST_TAG }} \
              --oca-tag ${{ env.TEST_TAG }} \
              -n 1 --demos \
              --dirname ${{ env.TEST_DEPLOY_DIR }} \
              --flask-config dockerdev \
              --mount-code
          cat ../server/instance/.env
          cat ${{ format('{0}/proofscape/deploy/{1}/mca-docker-compose.yml', github.workspace, env.TEST_DEPLOY_DIR) }}
      # -----------------------------------------
      # Make test repos
      - name: Make test repos
        working-directory: pise/server
        run: |
          git config --global user.email "pfsc.test.runner@localhost"
          git config --global user.name "pfsc test runner"
          source venv/bin/activate
          python -m tests.util.make_repos
      # -----
      # See what we got
      - name: See what we got
        run: |
          ls -l ${{ format('{0}/proofscape', github.workspace) }}
          ls -l ${{ format('{0}/proofscape/lib', github.workspace) }}
          ls -l ${{ format('{0}/proofscape/lib/test', github.workspace) }}
